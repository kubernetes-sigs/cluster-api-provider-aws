linters:
  disable-all: true
  enable:
  - asciicheck
  - bodyclose
  - deadcode
  - depguard
  - dogsled
  - errcheck
  - exportloopref
  - goconst
  - gocritic
  - gocyclo
  - godot
  - gofmt
  - goheader
  - goimports
  - goprintffuncname
  - gosec
  - gosimple
  - govet
  - ifshort
  - importas
  - ineffassign
  - misspell
  - nakedret
  - nilerr
  - noctx
  - nolintlint
  - prealloc
  - revive
  - rowserrcheck
  - staticcheck
  - structcheck
  - stylecheck
  - typecheck
  - unconvert
  - unparam
  - varcheck
  - whitespace

linters-settings:
  # Restrict revive to exported.
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    rules:
      - name: exported
        severity: warning
  ifshort:
    # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
    max-decl-chars: 50
  importas:
    no-unaliased: true
    alias:
      # Kubernetes
      - pkg: k8s.io/api/core/v1
        alias: corev1
      - pkg: k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1
        alias: apiextensionsv1
      - pkg: k8s.io/apimachinery/pkg/apis/meta/v1
        alias: metav1
      - pkg: k8s.io/apimachinery/pkg/api/errors
        alias: apierrors
      - pkg: k8s.io/apimachinery/pkg/util/errors
        alias: kerrors
      # Controller Runtime
      - pkg: sigs.k8s.io/controller-runtime
        alias: ctrl
  staticcheck:
    go: "1.16"
  stylecheck:
    go: "1.16"
issues:
  max-same-issues: 0
  max-issues-per-linter: 0
  # We are disabling default golangci exclusions because we want to help reviewers to focus on reviewing the most relevant
  # changes in PRs and avoid nitpicking.
  exclude-use-default: false
  # List of regexps of issue texts to exclude, empty list by default.
  exclude:
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    - "exported: exported (const|function|method|type|var) (.+) should have comment or be unexported"
    - "exported: (func|type) name will be used as (.+) by other packages, and that stutters; consider calling this (.+)"
    - (G104|G107|G404|G505|ST1000)
    - "G108: Profiling endpoint is automatically exposed on /debug/pprof"
    # Exclude noctx error for calling http.Get directly.
    # See https://pkg.go.dev/github.com/sonatard/noctx#readme-how-to-fix for reasons it breaks and ways to fix it.
    # This exclusion should be removed if the decision is made to fix the error.
    - "net/http.Get must not be called"
  exclude-rules:
    # Exclude revive's exported for certain packages and code, e.g. tests and fake.
    - linters:
      - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      source: (func|type).*Fake.*
    - linters:
      - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      path: fake_\.go
    - linters:
      - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      path: .*test/(providers|framework|e2e).*.go
    - linters:
      - errcheck
      text: Error return value is not checked
      path: _test\.go
    - linters:
      - errcheck
      text: Error return value of (.+) is not checked
      path: _test\.go
    - linters:
      - gosec
      text: "G108: Profiling endpoint is automatically exposed on /debug/pprof"
    - linters:
      - godot
      text: "Comment should end in a period"
      path: "(.*)/(v1alpha3|v1alpha4|v1alpha1)/(.*)types.go"
    - linters:
      - errcheck
      text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
    # With Go 1.16, the new embed directive can be used with an un-named import,
    # revive (previously, golint) only allows these to be imported in a main.go, which wouldn't work for us.
    # This directive allows the embed package to be imported with an underscore everywhere.
    - linters:
      - revive
      source: _ "embed"
    # This directive allows the variable in defaults.go files to have underscore
    - linters:
      - revive
      text: "var-naming: don't use underscores in Go names; func (.+) should be (.+)"
      path: .*/defaults.go
    # Disable unparam "always receives" which might not be really
    # useful when building libraries.
    - linters:
      - unparam
      text: always receives
    - linters:
      - unparam
      text: (.+) - (`t`|`g`) is unused
    - path: _test\.go
      text: cyclomatic complexity
    # Append should be able to assign to a different var/slice.
    - linters:
      - gocritic
      text: "appendAssign: append result not assigned to the same slice"

run:
  timeout: 10m
  skip-files:
  - "zz_generated.*\\.go$"
  - ".*conversion.*\\.go$"
  skip-dirs:
  - third_party
  allow-parallel-runners: true
