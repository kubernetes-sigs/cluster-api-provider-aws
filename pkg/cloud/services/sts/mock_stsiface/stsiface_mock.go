/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services/sts (interfaces: STSClient)

// Package mock_stsiface is a generated GoMock package.
package mock_stsiface

import (
	context "context"
	reflect "reflect"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	gomock "github.com/golang/mock/gomock"
)

// MockSTSClient is a mock of STSClient interface.
type MockSTSClient struct {
	ctrl     *gomock.Controller
	recorder *MockSTSClientMockRecorder
}

// MockSTSClientMockRecorder is the mock recorder for MockSTSClient.
type MockSTSClientMockRecorder struct {
	mock *MockSTSClient
}

// NewMockSTSClient creates a new mock instance.
func NewMockSTSClient(ctrl *gomock.Controller) *MockSTSClient {
	mock := &MockSTSClient{ctrl: ctrl}
	mock.recorder = &MockSTSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSTSClient) EXPECT() *MockSTSClientMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockSTSClient) AssumeRole(arg0 context.Context, arg1 *sts.AssumeRoleInput, arg2 ...func(*sts.Options)) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeRole", varargs...)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockSTSClientMockRecorder) AssumeRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockSTSClient)(nil).AssumeRole), varargs...)
}

// GetCallerIdentity mocks base method.
func (m *MockSTSClient) GetCallerIdentity(arg0 context.Context, arg1 *sts.GetCallerIdentityInput, arg2 ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCallerIdentity", varargs...)
	ret0, _ := ret[0].(*sts.GetCallerIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallerIdentity indicates an expected call of GetCallerIdentity.
func (mr *MockSTSClientMockRecorder) GetCallerIdentity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerIdentity", reflect.TypeOf((*MockSTSClient)(nil).GetCallerIdentity), varargs...)
}

// PresignGetCallerIdentity mocks base method.
func (m *MockSTSClient) PresignGetCallerIdentity(arg0 context.Context, arg1 *sts.GetCallerIdentityInput, arg2 ...func(*sts.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PresignGetCallerIdentity", varargs...)
	ret0, _ := ret[0].(*v4.PresignedHTTPRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignGetCallerIdentity indicates an expected call of PresignGetCallerIdentity.
func (mr *MockSTSClientMockRecorder) PresignGetCallerIdentity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignGetCallerIdentity", reflect.TypeOf((*MockSTSClient)(nil).PresignGetCallerIdentity), varargs...)
}
