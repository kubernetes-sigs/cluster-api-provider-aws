/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services/autoscaling (interfaces: AutoScalingAPI)

// Package mock_autoscalingiface is a generated GoMock package.
package mock_autoscalingiface

import (
	context "context"
	reflect "reflect"

	autoscaling "github.com/aws/aws-sdk-go-v2/service/autoscaling"
	gomock "github.com/golang/mock/gomock"
)

// MockAutoScalingAPI is a mock of AutoScalingAPI interface.
type MockAutoScalingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAutoScalingAPIMockRecorder
}

// MockAutoScalingAPIMockRecorder is the mock recorder for MockAutoScalingAPI.
type MockAutoScalingAPIMockRecorder struct {
	mock *MockAutoScalingAPI
}

// NewMockAutoScalingAPI creates a new mock instance.
func NewMockAutoScalingAPI(ctrl *gomock.Controller) *MockAutoScalingAPI {
	mock := &MockAutoScalingAPI{ctrl: ctrl}
	mock.recorder = &MockAutoScalingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoScalingAPI) EXPECT() *MockAutoScalingAPIMockRecorder {
	return m.recorder
}

// CreateAutoScalingGroup mocks base method.
func (m *MockAutoScalingAPI) CreateAutoScalingGroup(arg0 context.Context, arg1 *autoscaling.CreateAutoScalingGroupInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAutoScalingGroup", varargs...)
	ret0, _ := ret[0].(*autoscaling.CreateAutoScalingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutoScalingGroup indicates an expected call of CreateAutoScalingGroup.
func (mr *MockAutoScalingAPIMockRecorder) CreateAutoScalingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingGroup", reflect.TypeOf((*MockAutoScalingAPI)(nil).CreateAutoScalingGroup), varargs...)
}

// CreateOrUpdateTags mocks base method.
func (m *MockAutoScalingAPI) CreateOrUpdateTags(arg0 context.Context, arg1 *autoscaling.CreateOrUpdateTagsInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateTags", varargs...)
	ret0, _ := ret[0].(*autoscaling.CreateOrUpdateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateTags indicates an expected call of CreateOrUpdateTags.
func (mr *MockAutoScalingAPIMockRecorder) CreateOrUpdateTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateTags", reflect.TypeOf((*MockAutoScalingAPI)(nil).CreateOrUpdateTags), varargs...)
}

// DeleteAutoScalingGroup mocks base method.
func (m *MockAutoScalingAPI) DeleteAutoScalingGroup(arg0 context.Context, arg1 *autoscaling.DeleteAutoScalingGroupInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAutoScalingGroup", varargs...)
	ret0, _ := ret[0].(*autoscaling.DeleteAutoScalingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoScalingGroup indicates an expected call of DeleteAutoScalingGroup.
func (mr *MockAutoScalingAPIMockRecorder) DeleteAutoScalingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingGroup", reflect.TypeOf((*MockAutoScalingAPI)(nil).DeleteAutoScalingGroup), varargs...)
}

// DeleteLifecycleHook mocks base method.
func (m *MockAutoScalingAPI) DeleteLifecycleHook(arg0 context.Context, arg1 *autoscaling.DeleteLifecycleHookInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DeleteLifecycleHookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLifecycleHook", varargs...)
	ret0, _ := ret[0].(*autoscaling.DeleteLifecycleHookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLifecycleHook indicates an expected call of DeleteLifecycleHook.
func (mr *MockAutoScalingAPIMockRecorder) DeleteLifecycleHook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycleHook", reflect.TypeOf((*MockAutoScalingAPI)(nil).DeleteLifecycleHook), varargs...)
}

// DeleteTags mocks base method.
func (m *MockAutoScalingAPI) DeleteTags(arg0 context.Context, arg1 *autoscaling.DeleteTagsInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTags", varargs...)
	ret0, _ := ret[0].(*autoscaling.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags.
func (mr *MockAutoScalingAPIMockRecorder) DeleteTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockAutoScalingAPI)(nil).DeleteTags), varargs...)
}

// DescribeAutoScalingGroups mocks base method.
func (m *MockAutoScalingAPI) DescribeAutoScalingGroups(arg0 context.Context, arg1 *autoscaling.DescribeAutoScalingGroupsInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutoScalingGroups", varargs...)
	ret0, _ := ret[0].(*autoscaling.DescribeAutoScalingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutoScalingGroups indicates an expected call of DescribeAutoScalingGroups.
func (mr *MockAutoScalingAPIMockRecorder) DescribeAutoScalingGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoScalingGroups", reflect.TypeOf((*MockAutoScalingAPI)(nil).DescribeAutoScalingGroups), varargs...)
}

// DescribeInstanceRefreshes mocks base method.
func (m *MockAutoScalingAPI) DescribeInstanceRefreshes(arg0 context.Context, arg1 *autoscaling.DescribeInstanceRefreshesInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceRefreshes", varargs...)
	ret0, _ := ret[0].(*autoscaling.DescribeInstanceRefreshesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceRefreshes indicates an expected call of DescribeInstanceRefreshes.
func (mr *MockAutoScalingAPIMockRecorder) DescribeInstanceRefreshes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceRefreshes", reflect.TypeOf((*MockAutoScalingAPI)(nil).DescribeInstanceRefreshes), varargs...)
}

// DescribeLifecycleHooks mocks base method.
func (m *MockAutoScalingAPI) DescribeLifecycleHooks(arg0 context.Context, arg1 *autoscaling.DescribeLifecycleHooksInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLifecycleHooks", varargs...)
	ret0, _ := ret[0].(*autoscaling.DescribeLifecycleHooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLifecycleHooks indicates an expected call of DescribeLifecycleHooks.
func (mr *MockAutoScalingAPIMockRecorder) DescribeLifecycleHooks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLifecycleHooks", reflect.TypeOf((*MockAutoScalingAPI)(nil).DescribeLifecycleHooks), varargs...)
}

// PutLifecycleHook mocks base method.
func (m *MockAutoScalingAPI) PutLifecycleHook(arg0 context.Context, arg1 *autoscaling.PutLifecycleHookInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.PutLifecycleHookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLifecycleHook", varargs...)
	ret0, _ := ret[0].(*autoscaling.PutLifecycleHookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLifecycleHook indicates an expected call of PutLifecycleHook.
func (mr *MockAutoScalingAPIMockRecorder) PutLifecycleHook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLifecycleHook", reflect.TypeOf((*MockAutoScalingAPI)(nil).PutLifecycleHook), varargs...)
}

// ResumeProcesses mocks base method.
func (m *MockAutoScalingAPI) ResumeProcesses(arg0 context.Context, arg1 *autoscaling.ResumeProcessesInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.ResumeProcessesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeProcesses", varargs...)
	ret0, _ := ret[0].(*autoscaling.ResumeProcessesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeProcesses indicates an expected call of ResumeProcesses.
func (mr *MockAutoScalingAPIMockRecorder) ResumeProcesses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeProcesses", reflect.TypeOf((*MockAutoScalingAPI)(nil).ResumeProcesses), varargs...)
}

// StartInstanceRefresh mocks base method.
func (m *MockAutoScalingAPI) StartInstanceRefresh(arg0 context.Context, arg1 *autoscaling.StartInstanceRefreshInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.StartInstanceRefreshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartInstanceRefresh", varargs...)
	ret0, _ := ret[0].(*autoscaling.StartInstanceRefreshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceRefresh indicates an expected call of StartInstanceRefresh.
func (mr *MockAutoScalingAPIMockRecorder) StartInstanceRefresh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceRefresh", reflect.TypeOf((*MockAutoScalingAPI)(nil).StartInstanceRefresh), varargs...)
}

// SuspendProcesses mocks base method.
func (m *MockAutoScalingAPI) SuspendProcesses(arg0 context.Context, arg1 *autoscaling.SuspendProcessesInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.SuspendProcessesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuspendProcesses", varargs...)
	ret0, _ := ret[0].(*autoscaling.SuspendProcessesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendProcesses indicates an expected call of SuspendProcesses.
func (mr *MockAutoScalingAPIMockRecorder) SuspendProcesses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendProcesses", reflect.TypeOf((*MockAutoScalingAPI)(nil).SuspendProcesses), varargs...)
}

// UpdateAutoScalingGroup mocks base method.
func (m *MockAutoScalingAPI) UpdateAutoScalingGroup(arg0 context.Context, arg1 *autoscaling.UpdateAutoScalingGroupInput, arg2 ...func(*autoscaling.Options)) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAutoScalingGroup", varargs...)
	ret0, _ := ret[0].(*autoscaling.UpdateAutoScalingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAutoScalingGroup indicates an expected call of UpdateAutoScalingGroup.
func (mr *MockAutoScalingAPIMockRecorder) UpdateAutoScalingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutoScalingGroup", reflect.TypeOf((*MockAutoScalingAPI)(nil).UpdateAutoScalingGroup), varargs...)
}
