/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services (interfaces: KubeProxyInterface)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKubeProxyInterface is a mock of KubeProxyInterface interface.
type MockKubeProxyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubeProxyInterfaceMockRecorder
}

// MockKubeProxyInterfaceMockRecorder is the mock recorder for MockKubeProxyInterface.
type MockKubeProxyInterfaceMockRecorder struct {
	mock *MockKubeProxyInterface
}

// NewMockKubeProxyInterface creates a new mock instance.
func NewMockKubeProxyInterface(ctrl *gomock.Controller) *MockKubeProxyInterface {
	mock := &MockKubeProxyInterface{ctrl: ctrl}
	mock.recorder = &MockKubeProxyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeProxyInterface) EXPECT() *MockKubeProxyInterfaceMockRecorder {
	return m.recorder
}

// ReconcileKubeProxy mocks base method.
func (m *MockKubeProxyInterface) ReconcileKubeProxy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubeProxy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileKubeProxy indicates an expected call of ReconcileKubeProxy.
func (mr *MockKubeProxyInterfaceMockRecorder) ReconcileKubeProxy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubeProxy", reflect.TypeOf((*MockKubeProxyInterface)(nil).ReconcileKubeProxy), arg0)
}
