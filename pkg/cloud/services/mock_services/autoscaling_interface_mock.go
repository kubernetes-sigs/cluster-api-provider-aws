/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services (interfaces: ASGInterface)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta2 "sigs.k8s.io/cluster-api-provider-aws/v2/exp/api/v1beta2"
	scope "sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/scope"
)

// MockASGInterface is a mock of ASGInterface interface.
type MockASGInterface struct {
	ctrl     *gomock.Controller
	recorder *MockASGInterfaceMockRecorder
}

// MockASGInterfaceMockRecorder is the mock recorder for MockASGInterface.
type MockASGInterfaceMockRecorder struct {
	mock *MockASGInterface
}

// NewMockASGInterface creates a new mock instance.
func NewMockASGInterface(ctrl *gomock.Controller) *MockASGInterface {
	mock := &MockASGInterface{ctrl: ctrl}
	mock.recorder = &MockASGInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockASGInterface) EXPECT() *MockASGInterfaceMockRecorder {
	return m.recorder
}

// ASGIfExists mocks base method.
func (m *MockASGInterface) ASGIfExists(arg0 *string) (*v1beta2.AutoScalingGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ASGIfExists", arg0)
	ret0, _ := ret[0].(*v1beta2.AutoScalingGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ASGIfExists indicates an expected call of ASGIfExists.
func (mr *MockASGInterfaceMockRecorder) ASGIfExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ASGIfExists", reflect.TypeOf((*MockASGInterface)(nil).ASGIfExists), arg0)
}

// CanStartASGInstanceRefresh mocks base method.
func (m *MockASGInterface) CanStartASGInstanceRefresh(arg0 *scope.MachinePoolScope) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanStartASGInstanceRefresh", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanStartASGInstanceRefresh indicates an expected call of CanStartASGInstanceRefresh.
func (mr *MockASGInterfaceMockRecorder) CanStartASGInstanceRefresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanStartASGInstanceRefresh", reflect.TypeOf((*MockASGInterface)(nil).CanStartASGInstanceRefresh), arg0)
}

// CreateASG mocks base method.
func (m *MockASGInterface) CreateASG(arg0 *scope.MachinePoolScope) (*v1beta2.AutoScalingGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateASG", arg0)
	ret0, _ := ret[0].(*v1beta2.AutoScalingGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateASG indicates an expected call of CreateASG.
func (mr *MockASGInterfaceMockRecorder) CreateASG(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateASG", reflect.TypeOf((*MockASGInterface)(nil).CreateASG), arg0)
}

// CreateLifecycleHook mocks base method.
func (m *MockASGInterface) CreateLifecycleHook(arg0 context.Context, arg1 string, arg2 *v1beta2.AWSLifecycleHook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLifecycleHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLifecycleHook indicates an expected call of CreateLifecycleHook.
func (mr *MockASGInterfaceMockRecorder) CreateLifecycleHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLifecycleHook", reflect.TypeOf((*MockASGInterface)(nil).CreateLifecycleHook), arg0, arg1, arg2)
}

// DeleteASGAndWait mocks base method.
func (m *MockASGInterface) DeleteASGAndWait(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteASGAndWait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteASGAndWait indicates an expected call of DeleteASGAndWait.
func (mr *MockASGInterfaceMockRecorder) DeleteASGAndWait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteASGAndWait", reflect.TypeOf((*MockASGInterface)(nil).DeleteASGAndWait), arg0)
}

// DeleteLifecycleHook mocks base method.
func (m *MockASGInterface) DeleteLifecycleHook(arg0 context.Context, arg1 string, arg2 *v1beta2.AWSLifecycleHook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLifecycleHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLifecycleHook indicates an expected call of DeleteLifecycleHook.
func (mr *MockASGInterfaceMockRecorder) DeleteLifecycleHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycleHook", reflect.TypeOf((*MockASGInterface)(nil).DeleteLifecycleHook), arg0, arg1, arg2)
}

// DescribeLifecycleHooks mocks base method.
func (m *MockASGInterface) DescribeLifecycleHooks(arg0 string) ([]*v1beta2.AWSLifecycleHook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLifecycleHooks", arg0)
	ret0, _ := ret[0].([]*v1beta2.AWSLifecycleHook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLifecycleHooks indicates an expected call of DescribeLifecycleHooks.
func (mr *MockASGInterfaceMockRecorder) DescribeLifecycleHooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLifecycleHooks", reflect.TypeOf((*MockASGInterface)(nil).DescribeLifecycleHooks), arg0)
}

// GetASGByName mocks base method.
func (m *MockASGInterface) GetASGByName(arg0 *scope.MachinePoolScope) (*v1beta2.AutoScalingGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetASGByName", arg0)
	ret0, _ := ret[0].(*v1beta2.AutoScalingGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetASGByName indicates an expected call of GetASGByName.
func (mr *MockASGInterfaceMockRecorder) GetASGByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetASGByName", reflect.TypeOf((*MockASGInterface)(nil).GetASGByName), arg0)
}

// ResumeProcesses mocks base method.
func (m *MockASGInterface) ResumeProcesses(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeProcesses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeProcesses indicates an expected call of ResumeProcesses.
func (mr *MockASGInterfaceMockRecorder) ResumeProcesses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeProcesses", reflect.TypeOf((*MockASGInterface)(nil).ResumeProcesses), arg0, arg1)
}

// StartASGInstanceRefresh mocks base method.
func (m *MockASGInterface) StartASGInstanceRefresh(arg0 *scope.MachinePoolScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartASGInstanceRefresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartASGInstanceRefresh indicates an expected call of StartASGInstanceRefresh.
func (mr *MockASGInterfaceMockRecorder) StartASGInstanceRefresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartASGInstanceRefresh", reflect.TypeOf((*MockASGInterface)(nil).StartASGInstanceRefresh), arg0)
}

// SubnetIDs mocks base method.
func (m *MockASGInterface) SubnetIDs(arg0 *scope.MachinePoolScope) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetIDs indicates an expected call of SubnetIDs.
func (mr *MockASGInterfaceMockRecorder) SubnetIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetIDs", reflect.TypeOf((*MockASGInterface)(nil).SubnetIDs), arg0)
}

// SuspendProcesses mocks base method.
func (m *MockASGInterface) SuspendProcesses(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendProcesses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendProcesses indicates an expected call of SuspendProcesses.
func (mr *MockASGInterfaceMockRecorder) SuspendProcesses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendProcesses", reflect.TypeOf((*MockASGInterface)(nil).SuspendProcesses), arg0, arg1)
}

// UpdateASG mocks base method.
func (m *MockASGInterface) UpdateASG(arg0 *scope.MachinePoolScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateASG", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateASG indicates an expected call of UpdateASG.
func (mr *MockASGInterfaceMockRecorder) UpdateASG(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateASG", reflect.TypeOf((*MockASGInterface)(nil).UpdateASG), arg0)
}

// UpdateLifecycleHook mocks base method.
func (m *MockASGInterface) UpdateLifecycleHook(arg0 context.Context, arg1 string, arg2 *v1beta2.AWSLifecycleHook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLifecycleHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLifecycleHook indicates an expected call of UpdateLifecycleHook.
func (mr *MockASGInterfaceMockRecorder) UpdateLifecycleHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLifecycleHook", reflect.TypeOf((*MockASGInterface)(nil).UpdateLifecycleHook), arg0, arg1, arg2)
}

// UpdateResourceTags mocks base method.
func (m *MockASGInterface) UpdateResourceTags(arg0 *string, arg1, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceTags indicates an expected call of UpdateResourceTags.
func (mr *MockASGInterfaceMockRecorder) UpdateResourceTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceTags", reflect.TypeOf((*MockASGInterface)(nil).UpdateResourceTags), arg0, arg1, arg2)
}
