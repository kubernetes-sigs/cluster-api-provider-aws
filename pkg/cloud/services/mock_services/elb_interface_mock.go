/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services (interfaces: ELBInterface)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta2 "sigs.k8s.io/cluster-api-provider-aws/v2/api/v1beta2"
)

// MockELBInterface is a mock of ELBInterface interface.
type MockELBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockELBInterfaceMockRecorder
}

// MockELBInterfaceMockRecorder is the mock recorder for MockELBInterface.
type MockELBInterfaceMockRecorder struct {
	mock *MockELBInterface
}

// NewMockELBInterface creates a new mock instance.
func NewMockELBInterface(ctrl *gomock.Controller) *MockELBInterface {
	mock := &MockELBInterface{ctrl: ctrl}
	mock.recorder = &MockELBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockELBInterface) EXPECT() *MockELBInterfaceMockRecorder {
	return m.recorder
}

// DeleteLoadbalancers mocks base method.
func (m *MockELBInterface) DeleteLoadbalancers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadbalancers")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadbalancers indicates an expected call of DeleteLoadbalancers.
func (mr *MockELBInterfaceMockRecorder) DeleteLoadbalancers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadbalancers", reflect.TypeOf((*MockELBInterface)(nil).DeleteLoadbalancers))
}

// DeregisterInstanceFromAPIServerELB mocks base method.
func (m *MockELBInterface) DeregisterInstanceFromAPIServerELB(arg0 *v1beta2.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstanceFromAPIServerELB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterInstanceFromAPIServerELB indicates an expected call of DeregisterInstanceFromAPIServerELB.
func (mr *MockELBInterfaceMockRecorder) DeregisterInstanceFromAPIServerELB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceFromAPIServerELB", reflect.TypeOf((*MockELBInterface)(nil).DeregisterInstanceFromAPIServerELB), arg0)
}

// DeregisterInstanceFromAPIServerLB mocks base method.
func (m *MockELBInterface) DeregisterInstanceFromAPIServerLB(arg0 string, arg1 *v1beta2.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstanceFromAPIServerLB", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterInstanceFromAPIServerLB indicates an expected call of DeregisterInstanceFromAPIServerLB.
func (mr *MockELBInterfaceMockRecorder) DeregisterInstanceFromAPIServerLB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceFromAPIServerLB", reflect.TypeOf((*MockELBInterface)(nil).DeregisterInstanceFromAPIServerLB), arg0, arg1)
}

// IsInstanceRegisteredWithAPIServerELB mocks base method.
func (m *MockELBInterface) IsInstanceRegisteredWithAPIServerELB(arg0 *v1beta2.Instance) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstanceRegisteredWithAPIServerELB", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstanceRegisteredWithAPIServerELB indicates an expected call of IsInstanceRegisteredWithAPIServerELB.
func (mr *MockELBInterfaceMockRecorder) IsInstanceRegisteredWithAPIServerELB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstanceRegisteredWithAPIServerELB", reflect.TypeOf((*MockELBInterface)(nil).IsInstanceRegisteredWithAPIServerELB), arg0)
}

// IsInstanceRegisteredWithAPIServerLB mocks base method.
func (m *MockELBInterface) IsInstanceRegisteredWithAPIServerLB(arg0 *v1beta2.Instance, arg1 *v1beta2.AWSLoadBalancerSpec) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstanceRegisteredWithAPIServerLB", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsInstanceRegisteredWithAPIServerLB indicates an expected call of IsInstanceRegisteredWithAPIServerLB.
func (mr *MockELBInterfaceMockRecorder) IsInstanceRegisteredWithAPIServerLB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstanceRegisteredWithAPIServerLB", reflect.TypeOf((*MockELBInterface)(nil).IsInstanceRegisteredWithAPIServerLB), arg0, arg1)
}

// ReconcileLoadbalancers mocks base method.
func (m *MockELBInterface) ReconcileLoadbalancers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileLoadbalancers")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileLoadbalancers indicates an expected call of ReconcileLoadbalancers.
func (mr *MockELBInterfaceMockRecorder) ReconcileLoadbalancers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileLoadbalancers", reflect.TypeOf((*MockELBInterface)(nil).ReconcileLoadbalancers))
}

// RegisterInstanceWithAPIServerELB mocks base method.
func (m *MockELBInterface) RegisterInstanceWithAPIServerELB(arg0 *v1beta2.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstanceWithAPIServerELB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstanceWithAPIServerELB indicates an expected call of RegisterInstanceWithAPIServerELB.
func (mr *MockELBInterfaceMockRecorder) RegisterInstanceWithAPIServerELB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceWithAPIServerELB", reflect.TypeOf((*MockELBInterface)(nil).RegisterInstanceWithAPIServerELB), arg0)
}

// RegisterInstanceWithAPIServerLB mocks base method.
func (m *MockELBInterface) RegisterInstanceWithAPIServerLB(arg0 *v1beta2.Instance, arg1 *v1beta2.AWSLoadBalancerSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstanceWithAPIServerLB", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstanceWithAPIServerLB indicates an expected call of RegisterInstanceWithAPIServerLB.
func (mr *MockELBInterfaceMockRecorder) RegisterInstanceWithAPIServerLB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceWithAPIServerLB", reflect.TypeOf((*MockELBInterface)(nil).RegisterInstanceWithAPIServerLB), arg0, arg1)
}
