/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ../reconciler.go

// Package mock_coalescing is a generated GoMock package.
package mock_coalescing

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockReconcileCacher is a mock of ReconcileCacher interface.
type MockReconcileCacher struct {
	ctrl     *gomock.Controller
	recorder *MockReconcileCacherMockRecorder
}

// MockReconcileCacherMockRecorder is the mock recorder for MockReconcileCacher.
type MockReconcileCacherMockRecorder struct {
	mock *MockReconcileCacher
}

// NewMockReconcileCacher creates a new mock instance.
func NewMockReconcileCacher(ctrl *gomock.Controller) *MockReconcileCacher {
	mock := &MockReconcileCacher{ctrl: ctrl}
	mock.recorder = &MockReconcileCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconcileCacher) EXPECT() *MockReconcileCacherMockRecorder {
	return m.recorder
}

// Reconciled mocks base method.
func (m *MockReconcileCacher) Reconciled(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reconciled", key)
}

// Reconciled indicates an expected call of Reconciled.
func (mr *MockReconcileCacherMockRecorder) Reconciled(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconciled", reflect.TypeOf((*MockReconcileCacher)(nil).Reconciled), key)
}

// ShouldProcess mocks base method.
func (m *MockReconcileCacher) ShouldProcess(key string) (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldProcess", key)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ShouldProcess indicates an expected call of ShouldProcess.
func (mr *MockReconcileCacherMockRecorder) ShouldProcess(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldProcess", reflect.TypeOf((*MockReconcileCacher)(nil).ShouldProcess), key)
}
