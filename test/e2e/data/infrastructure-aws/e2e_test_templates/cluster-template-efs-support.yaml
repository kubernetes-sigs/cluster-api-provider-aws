apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: ${CLUSTER_NAME}-crs-0
    csi: external
  name: ${CLUSTER_NAME}
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSCluster
metadata:
  name: ${CLUSTER_NAME}
spec:
  network:
    vpc:
      availabilityZoneUsageLimit: 1
  region: ${AWS_REGION}
  sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: aws
      controllerManager:
        extraArgs:
          cloud-provider: aws
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: aws
        name: '{{ ds.meta_data.local_hostname }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: aws
        name: '{{ ds.meta_data.local_hostname }}'
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AWSMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  template:
    spec:
      iamInstanceProfile: control-plane.cluster-api-provider-aws.sigs.k8s.io
      instanceType: ${AWS_CONTROL_PLANE_MACHINE_TYPE}
      sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        name: ${CLUSTER_NAME}-md-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      iamInstanceProfile: nodes.cluster-api-provider-aws.sigs.k8s.io
      instanceType: ${AWS_NODE_MACHINE_TYPE}
      rootVolume:
        size: 16
      sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: aws
          name: '{{ ds.meta_data.local_hostname }}'
---
apiVersion: v1
data: ${CNI_RESOURCES}
kind: ConfigMap
metadata:
  name: cni-${CLUSTER_NAME}-crs-0
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-crs-0
spec:
  clusterSelector:
    matchLabels:
      cni: ${CLUSTER_NAME}-crs-0
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-crs-0
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: crs-csi
spec:
  clusterSelector:
    matchLabels:
      csi: external
  resources:
  - kind: ConfigMap
    name: aws-efs-csi-driver-addon
  strategy: ApplyOnce
---
apiVersion: v1
data:
  aws-efs-csi-external.yaml: |-
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-node-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-external-provisioner-role
    rules:
      - apiGroups:
          - ""
        resources:
          - persistentvolumes
        verbs:
          - get
          - list
          - watch
          - create
          - delete
      - apiGroups:
          - ""
        resources:
          - persistentvolumeclaims
        verbs:
          - get
          - list
          - watch
          - update
      - apiGroups:
          - storage.k8s.io
        resources:
          - storageclasses
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - list
          - watch
          - create
          - patch
      - apiGroups:
          - storage.k8s.io
        resources:
          - csinodes
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - get
          - watch
          - list
          - delete
          - update
          - create
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - watch
          - list
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-provisioner-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: efs-csi-external-provisioner-role
    subjects:
      - kind: ServiceAccount
        name: efs-csi-controller-sa
        namespace: kube-system
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-controller
      namespace: kube-system
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: efs-csi-controller
          app.kubernetes.io/instance: kustomize
          app.kubernetes.io/name: aws-efs-csi-driver
      template:
        metadata:
          labels:
            app: efs-csi-controller
            app.kubernetes.io/instance: kustomize
            app.kubernetes.io/name: aws-efs-csi-driver
        spec:
          containers:
            - args:
                - --endpoint=$(CSI_ENDPOINT)
                - --logtostderr
                - --v=2
                - --delete-access-point-root-dir=false
              env:
                - name: CSI_ENDPOINT
                  value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
              image: amazon/aws-efs-csi-driver:v1.3.6
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 3
              name: efs-plugin
              ports:
                - containerPort: 9909
                  name: healthz
                  protocol: TCP
              securityContext:
                privileged: true
              volumeMounts:
                - mountPath: /var/lib/csi/sockets/pluginproxy/
                  name: socket-dir
            - args:
                - --csi-address=$(ADDRESS)
                - --v=2
                - --feature-gates=Topology=true
                - --extra-create-metadata
                - --leader-election
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              image: public.ecr.aws/eks-distro/kubernetes-csi/external-provisioner:v2.1.1-eks-1-18-2
              imagePullPolicy: IfNotPresent
              name: csi-provisioner
              volumeMounts:
                - mountPath: /var/lib/csi/sockets/pluginproxy/
                  name: socket-dir
            - args:
                - --csi-address=/csi/csi.sock
                - --health-port=9909
              image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.2.0-eks-1-18-2
              imagePullPolicy: IfNotPresent
              name: liveness-probe
              volumeMounts:
                - mountPath: /csi
                  name: socket-dir
          hostNetwork: true
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: efs-csi-controller-sa
          volumes:
            - emptyDir: {}
              name: socket-dir
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
      name: efs-csi-node
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          app: efs-csi-node
          app.kubernetes.io/instance: kustomize
          app.kubernetes.io/name: aws-efs-csi-driver
      template:
        metadata:
          labels:
            app: efs-csi-node
            app.kubernetes.io/instance: kustomize
            app.kubernetes.io/name: aws-efs-csi-driver
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: eks.amazonaws.com/compute-type
                        operator: NotIn
                        values:
                          - fargate
          containers:
            - args:
                - --endpoint=$(CSI_ENDPOINT)
                - --logtostderr
                - --v=2
              env:
                - name: CSI_ENDPOINT
                  value: unix:/csi/csi.sock
              image: amazon/aws-efs-csi-driver:v1.3.6
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 2
                timeoutSeconds: 3
              name: efs-plugin
              ports:
                - containerPort: 9809
                  name: healthz
                  protocol: TCP
              securityContext:
                privileged: true
              volumeMounts:
                - mountPath: /var/lib/kubelet
                  mountPropagation: Bidirectional
                  name: kubelet-dir
                - mountPath: /csi
                  name: plugin-dir
                - mountPath: /var/run/efs
                  name: efs-state-dir
                - mountPath: /var/amazon/efs
                  name: efs-utils-config
                - mountPath: /etc/amazon/efs-legacy
                  name: efs-utils-config-legacy
            - args:
                - --csi-address=$(ADDRESS)
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --v=2
              env:
                - name: ADDRESS
                  value: /csi/csi.sock
                - name: DRIVER_REG_SOCK_PATH
                  value: /var/lib/kubelet/plugins/efs.csi.aws.com/csi.sock
                - name: KUBE_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              image: public.ecr.aws/eks-distro/kubernetes-csi/node-driver-registrar:v2.1.0-eks-1-18-2
              imagePullPolicy: IfNotPresent
              name: csi-driver-registrar
              volumeMounts:
                - mountPath: /csi
                  name: plugin-dir
                - mountPath: /registration
                  name: registration-dir
            - args:
                - --csi-address=/csi/csi.sock
                - --health-port=9809
                - --v=2
              image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.2.0-eks-1-18-2
              imagePullPolicy: IfNotPresent
              name: liveness-probe
              volumeMounts:
                - mountPath: /csi
                  name: plugin-dir
          dnsPolicy: ClusterFirst
          hostNetwork: true
          nodeSelector:
            beta.kubernetes.io/os: linux
          priorityClassName: system-node-critical
          serviceAccountName: efs-csi-node-sa
          tolerations:
            - operator: Exists
          volumes:
            - hostPath:
                path: /var/lib/kubelet
                type: Directory
              name: kubelet-dir
            - hostPath:
                path: /var/lib/kubelet/plugins/efs.csi.aws.com/
                type: DirectoryOrCreate
              name: plugin-dir
            - hostPath:
                path: /var/lib/kubelet/plugins_registry/
                type: Directory
              name: registration-dir
            - hostPath:
                path: /var/run/efs
                type: DirectoryOrCreate
              name: efs-state-dir
            - hostPath:
                path: /var/amazon/efs
                type: DirectoryOrCreate
              name: efs-utils-config
            - hostPath:
                path: /etc/amazon/efs
                type: DirectoryOrCreate
              name: efs-utils-config-legacy
    ---
    apiVersion: storage.k8s.io/v1
    kind: CSIDriver
    metadata:
      annotations:
        helm.sh/hook: pre-install, pre-upgrade
        helm.sh/hook-delete-policy: before-hook-creation
        helm.sh/resource-policy: keep
      name: efs.csi.aws.com
    spec:
      attachRequired: false
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: aws-efs-csi-driver-addon
