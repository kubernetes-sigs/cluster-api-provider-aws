apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
spec:
  clusterConfiguration:
    kubernetesVersion: "ci/latest"
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
  files:
  - path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -o nounset
      set -o pipefail
      set -o errexit

      [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

      if ! gsutil version > /dev/null; then
      curl -sSL https://sdk.cloud.google.com > /tmp/gcl && bash /tmp/gcl --install-dir=~/gcloud --disable-prompts > /dev/null 2>&1
      export PATH=$PATH:~/gcloud/google-cloud-sdk/bin
      fi
      gsutil version

      # This test installs debian packages that are a result of the CI and release builds.
      # It runs '... --version' commands to verify that the binaries are correctly installed
      # and finally uninstalls the packages.
      # For the release packages it tests all versions in the support skew.

      LINE_SEPARATOR="*************************************************"
      echo "$LINE_SEPARATOR"

      CI_VERSION=${CI_VERSION:-""}
      if [[ "${CI_VERSION}" != "" ]]; then
        CI_DIR=/tmp/k8s-ci
        mkdir -p $CI_DIR
        CI_URL="gs://kubernetes-release-dev/ci/$CI_VERSION-bazel/bin/linux/amd64"
        declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
        PACKAGE_EXT="deb"
        declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
        CONTAINER_EXT="tar"

        echo "* testing CI version $CI_VERSION"

        for CI_PACKAGE in "${PACKAGES_TO_TEST[@]}"; do
        echo "* downloading package: $CI_URL/$CI_PACKAGE.$PACKAGE_EXT"
        gsutil cp "$CI_URL/$CI_PACKAGE.$PACKAGE_EXT" "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT"
        ${SUDO} dpkg -i "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT" || echo "* ignoring expected 'dpkg -i' result"
        done

        for CI_CONTAINER in "${CONTAINERS_TO_TEST[@]}"; do
        echo "* downloading package: $CI_URL/$CI_CONTAINER.$CONTAINER_EXT"
        gsutil cp "$CI_URL/$CI_CONTAINER.$CONTAINER_EXT" "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT"
        ${SUDO} ctr -n k8s.io images import "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
        ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" k8s.gcr.io/$CI_CONTAINER:"${CI_VERSION//+/_}"
        ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" gcr.io/kubernetes-ci-images/$CI_CONTAINER:"${CI_VERSION//+/_}"
        done
      fi

      echo "* checking binary versions"

      echo "ctr version: " $(ctr version)
      echo "kubeadm version: " $(kubeadm version -o=short)
      echo "kubectl version: " $(kubectl version --client=true --short=true)
      echo "kubelet version: " $(kubelet --version)

      echo "$LINE_SEPARATOR"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-1
spec:
  preKubeadmCommands:
    - bash -c /tmp/kubeadm-bootstrap.sh
  files:
    - path: /tmp/kubeadm-bootstrap.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit

        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

        if ! gsutil version > /dev/null; then
          curl -sSL https://sdk.cloud.google.com > /tmp/gcl && bash /tmp/gcl --install-dir=~/gcloud --disable-prompts > /dev/null 2>&1
          export PATH=$PATH:~/gcloud/google-cloud-sdk/bin
        fi
        gsutil version

        # This test installs debian packages that are a result of the CI and release builds.
        # It runs '... --version' commands to verify that the binaries are correctly installed
        # and finally uninstalls the packages.
        # For the release packages it tests all versions in the support skew.

        LINE_SEPARATOR="*************************************************"
        echo "$LINE_SEPARATOR"

        CI_VERSION=${CI_VERSION:-""}
        if [[ "${CI_VERSION}" != "" ]]; then
          CI_DIR=/tmp/k8s-ci
          mkdir -p $CI_DIR
          CI_URL="gs://kubernetes-release-dev/ci/$CI_VERSION-bazel/bin/linux/amd64"
          declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
          PACKAGE_EXT="deb"
          declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
          CONTAINER_EXT="tar"

          echo "* testing CI version $CI_VERSION"

          for CI_PACKAGE in "${PACKAGES_TO_TEST[@]}"; do
          echo "* downloading package: $CI_URL/$CI_PACKAGE.$PACKAGE_EXT"
          gsutil cp "$CI_URL/$CI_PACKAGE.$PACKAGE_EXT" "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT"
          ${SUDO} dpkg -i "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT" || echo "* ignoring expected 'dpkg -i' result"
          done

          for CI_CONTAINER in "${CONTAINERS_TO_TEST[@]}"; do
          echo "* downloading package: $CI_URL/$CI_CONTAINER.$CONTAINER_EXT"
          gsutil cp "$CI_URL/$CI_CONTAINER.$CONTAINER_EXT" "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT"
          ${SUDO} ctr -n k8s.io images import "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
          ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" k8s.gcr.io/$CI_CONTAINER:"${CI_VERSION//+/_}"
          ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" gcr.io/kubernetes-ci-images/$CI_CONTAINER:"${CI_VERSION//+/_}"
          done
        fi

        echo "* checking binary versions"

        echo "ctr version: " $(ctr version)
        echo "kubeadm version: " $(kubeadm version -o=short)
        echo "kubectl version: " $(kubectl version --client=true --short=true)
        echo "kubelet version: " $(kubelet --version)

        echo "$LINE_SEPARATOR"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-2
spec:
  preKubeadmCommands:
    - bash -c /tmp/kubeadm-bootstrap.sh
  files:
    - path: /tmp/kubeadm-bootstrap.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit

        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

        if ! gsutil version > /dev/null; then
        curl -sSL https://sdk.cloud.google.com > /tmp/gcl && bash /tmp/gcl --install-dir=~/gcloud --disable-prompts > /dev/null 2>&1
        export PATH=$PATH:~/gcloud/google-cloud-sdk/bin
        fi
        gsutil version

        # This test installs debian packages that are a result of the CI and release builds.
        # It runs '... --version' commands to verify that the binaries are correctly installed
        # and finally uninstalls the packages.
        # For the release packages it tests all versions in the support skew.

        LINE_SEPARATOR="*************************************************"
        echo "$LINE_SEPARATOR"

        CI_VERSION=${CI_VERSION:-""}
        if [[ "${CI_VERSION}" != "" ]]; then
          CI_DIR=/tmp/k8s-ci
          mkdir -p $CI_DIR
          CI_URL="gs://kubernetes-release-dev/ci/$CI_VERSION-bazel/bin/linux/amd64"
          declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
          PACKAGE_EXT="deb"
          declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
          CONTAINER_EXT="tar"

          echo "* testing CI version $CI_VERSION"

          for CI_PACKAGE in "${PACKAGES_TO_TEST[@]}"; do
          echo "* downloading package: $CI_URL/$CI_PACKAGE.$PACKAGE_EXT"
          gsutil cp "$CI_URL/$CI_PACKAGE.$PACKAGE_EXT" "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT"
          ${SUDO} dpkg -i "$CI_DIR/$CI_PACKAGE.$PACKAGE_EXT" || echo "* ignoring expected 'dpkg -i' result"
          done

          for CI_CONTAINER in "${CONTAINERS_TO_TEST[@]}"; do
          echo "* downloading package: $CI_URL/$CI_CONTAINER.$CONTAINER_EXT"
          gsutil cp "$CI_URL/$CI_CONTAINER.$CONTAINER_EXT" "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT"
          ${SUDO} ctr -n k8s.io images import "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
          ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" k8s.gcr.io/$CI_CONTAINER:"${CI_VERSION//+/_}"
          ${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" gcr.io/kubernetes-ci-images/$CI_CONTAINER:"${CI_VERSION//+/_}"
          done
        fi

        echo "* checking binary versions"

        echo "ctr version: " $(ctr version)
        echo "kubeadm version: " $(kubeadm version -o=short)
        echo "kubectl version: " $(kubectl version --client=true --short=true)
        echo "kubelet version: " $(kubelet --version)

        echo "$LINE_SEPARATOR"
